<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the mapping file is based on" %>
<%@ Property Name="Namespace" Type="System.String" Default="MC.BLL" Category="Object" Description="The class namespace that the mapping file should use" %>
<%@ Property Name="RemoveTablePrefix" Type="System.String" Default="tbl" Category="Object" Description="The prefix to remove from table names" %>
<%@ Property Name="Assembly" Type="System.String" Default="MC.BLL" Category="Object" Description="The assembly that the class will be used in" %>
<%@ Property Name="ForceId" Type="System.Boolean" Default="true" Category="Object" Description="Force Id for identity column" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer"%>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MC.Model;

namespace <%= Namespace %>
{
    public class <%= SourceTable.Name %>BLL
    {
        public static IList<<%= SourceTable.Name %>> GetList(QueryInfo queryInfo)
        {
            return BLLService.GetList<<%= SourceTable.Name %>>(queryInfo);
        }
        public static PagedIList<<%= SourceTable.Name %>> GetPageList(QueryInfo queryInfo)
        {
            return BLLService.GetIListPage<<%= SourceTable.Name %>>(queryInfo);
        }
        public static <%= SourceTable.Name %> GetItem(object <%=AddSqlTrim(SourceTable.PrimaryKey.MemberColumns[0])%>)
        {
            return BLLService.GetItem<<%= SourceTable.Name %>>(<%=AddSqlTrim(SourceTable.PrimaryKey.MemberColumns[0])%>);
        }
        public static int Insert(<%= SourceTable.Name %> item)
        {
            item.SetState(EntityState.Added);
            return BLLService.Save(item);
        }
        public static int Update(<%= SourceTable.Name %> item)
        {
            item.SetState(EntityState.Modified);
            return BLLService.Save(item);
        }
        public static int Delete(List<string> ids)
        {
            QueryInfo query = new QueryInfo();
            query.Parameters.Add("ids", ids);
            query.MappingName = typeof(<%= SourceTable.Name %>).Name;
            return BLLService.Delete(query);
        }
    }
}
<!-- #include file="function.inc" -->
