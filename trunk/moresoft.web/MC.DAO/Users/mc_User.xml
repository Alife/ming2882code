<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="mc_User" xmlns="http://ibatis.apache.org/mapping"	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  >
  <alias>
    <typeAlias alias="mc_User" type="MC.Model.mc_User,MC.Model" />
  </alias>

  <resultMaps>
    <resultMap id="SelectResult" class="mc_User" >
      <result property="ID" column="ID" />
      <result property="UserName" column="UserName" />
      <result property="Password" column="Password" />
      <result property="DeptID" column="DeptID" />
      <result property="Email" column="Email" />
    </resultMap>
  </resultMaps>
  <statements>
    <sql id="MC.Model.mc_User.sqlwhere">
      <dynamic prepend="WHERE">
        <isNotNull prepend="AND" property="ID">
          ID = #ID#
        </isNotNull>
        <isNotNull prepend="AND" property="UserName">
          UserName = #UserName#
        </isNotNull>
        <isNotNull prepend="AND" property="Password">
          Password = #Password#
        </isNotNull>
        <isNotNull prepend="AND" property="DeptID">
          DeptID = #DeptID#
        </isNotNull>
        <isNotNull prepend="AND" property="Email">
          Email = #Email#
        </isNotNull>
      </dynamic>
    </sql>
    <select id="MC.Model.mc_User.Count" parameterClass="System.Collections.IDictionary" resultClass="int">
      Select count(1) FROM mc_User <include refid="MC.Model.mc_User.sqlwhere"/>
    </select>
    <select id="MC.Model.mc_User.LoadPageList" parameterClass="System.Collections.IDictionary" resultMap="SelectResult">
      Select ID,UserName,Password,DeptID,Email FROM(
      Select ID,UserName,Password,DeptID,Email
      ,ROW_NUMBER() Over(
      <dynamic>
        <isNotNull property="sort">order by $sort$ $dir$</isNotNull>
        <isNull property="sort">order by ID desc</isNull>
      </dynamic>) as rowNum
      FROM mc_User
      <include refid="MC.Model.mc_User.sqlwhere"/>
      ) as temptable
      <dynamic prepend="WHERE">
        <isNotNull prepend="AND" property="page">
          rowNum BETWEEN (#page#-1)*#rows#+1
          <isNotNull prepend="AND" property="rows">
            #page#*#rows#
          </isNotNull>
        </isNotNull>
      </dynamic>
    </select>
    <select id="MC.Model.mc_User.Load" parameterClass="System.Collections.IDictionary" resultMap="SelectResult">
      Select ID,UserName,Password,DeptID,Email FROM mc_User
      <dynamic prepend="WHERE">
        <isNotNull prepend="AND" property="ID">
          ID = #ID#
        </isNotNull>
        <isNotNull prepend="AND" property="UserName">
          UserName = #UserName#
        </isNotNull>
        <isNotNull prepend="AND" property="Password">
          Password = #Password#
        </isNotNull>
        <isNotNull prepend="AND" property="DeptID">
          DeptID = #DeptID#
        </isNotNull>
        <isNotNull prepend="AND" property="Email">
          Email = #Email#
        </isNotNull>
      </dynamic>
      <dynamic>
        <isNotNull property="OrderBy">
          $OrderBy$
        </isNotNull>
      </dynamic>
    </select>
    <select id="MC.Model.mc_User.GetUserLogin" parameterClass="mc_User" resultMap="SelectResult">
      <![CDATA[
      declare @ID int;
      if exists (select ID from mc_User where UserName=#UserName# and Password=#Password#)
      begin
      select @ID=ID from mc_User where UserName=#UserName# and Password=#Password#;
      update mc_User set DeptID=DeptID+1 where ID=@ID;
      select ID,UserName,Password,DeptID,Email FROM mc_User where ID=@ID;
      end]]>
    </select>
    <insert id="MC.Model.mc_User.Insert" parameterClass="mc_User">
      insert into mc_User(
      UserName
      ,Password
      ,DeptID
      ,Email
      )values (
      #UserName#
      ,#Password#
      ,#DeptID#
      ,#Email#
      )
      <selectKey property="ID" type="post" resultClass="int">
        ${selectKey}
      </selectKey>
    </insert>
    <update id="MC.Model.mc_User.Update" parameterClass="mc_User">
      update mc_User set
      UserName = #UserName#
      ,Password = #Password#
      ,DeptID = #DeptID#
      ,Email = #Email#
      WHERE
      ID = #ID#
    </update>
    <update id="MC.Model.mc_User.UpdatePassword">
      update mc_User set
      Password = #NewPassword#
      WHERE
      ID = #ID# and Password = #OldPassword#
    </update>
    <delete id="MC.Model.mc_User.Delete" parameterClass="list">
      delete
      FROM mc_User
      WHERE ID IN
      <iterate property="ids" open="(" close=")"  conjunction="," >
        #ids[]#
      </iterate>
    </delete>
  </statements>
</sqlMap>

